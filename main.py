import asyncio
import logging
import json
import random
import base64
from datetime import datetime, timedelta
from urllib.parse import quote
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8265769208:AAH3R9aTPOwMWV5ir5SjIRQMNPzTbaYI18k"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AppStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_movie = State()
    waiting_for_recipe = State()
    waiting_for_qr_text = State()
    waiting_for_translate_text = State()
    waiting_for_color_hex = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
user_stats = {}
user_favorites = {}

def init_user_data(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            "last_activity": datetime.now(),
            "settings": {"language": "ru", "theme": "light"},
            "streak": 0
        }
    
    if user_id not in user_stats:
        user_stats[user_id] = {}
    
    if user_id not in user_favorites:
        user_favorites[user_id] = {
            "cities": [],
            "movies": [],
            "quotes": [],
            "jokes": []
        }

def update_user_stats(user_id, action):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    init_user_data(user_id)
    
    if action not in user_stats[user_id]:
        user_stats[user_id][action] = 0
    
    user_stats[user_id][action] += 1
    user_data[user_id]["last_activity"] = datetime.now()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="crypto"),
            InlineKeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞", callback_data="weather")
        ],
        [
            InlineKeyboardButton(text="üé¨ –§–∏–ª—å–º—ã", callback_data="movies"),
            InlineKeyboardButton(text="üòÇ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", callback_data="entertainment")
        ],
        [
            InlineKeyboardButton(text="üîß –£—Ç–∏–ª–∏—Ç—ã", callback_data="utilities"),
            InlineKeyboardButton(text="üçî –ï–¥–∞", callback_data="food")
        ],
        [
            InlineKeyboardButton(text="üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", callback_data="creative"),
            InlineKeyboardButton(text="üì± –°–æ—Ü—Å–µ—Ç–∏", callback_data="social")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ]
    ])
    return keyboard

def get_crypto_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚Çø Bitcoin", callback_data="crypto_bitcoin"),
            InlineKeyboardButton(text="Œû Ethereum", callback_data="crypto_ethereum")
        ],
        [
            InlineKeyboardButton(text="üî∏ BNB", callback_data="crypto_binancecoin"),
            InlineKeyboardButton(text="üíé Cardano", callback_data="crypto_cardano")
        ],
        [
            InlineKeyboardButton(text="üåü Solana", callback_data="crypto_solana"),
            InlineKeyboardButton(text="üöÄ Dogecoin", callback_data="crypto_dogecoin")
        ],
        [
            InlineKeyboardButton(text="üìä –¢–æ–ø 15", callback_data="crypto_top15"),
            InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥–∏–Ω–≥", callback_data="crypto_trending")
        ],
        [
            InlineKeyboardButton(text="üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="crypto_converter"),
            InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="crypto_news")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_entertainment_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üòÇ –ê–Ω–µ–∫–¥–æ—Ç—ã", callback_data="jokes"),
            InlineKeyboardButton(text="üê± –ö–æ—Ç–∏–∫–∏", callback_data="cats")
        ],
        [
            InlineKeyboardButton(text="üê∂ –°–æ–±–∞—á–∫–∏", callback_data="dogs"),
            InlineKeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="activities")
        ],
        [
            InlineKeyboardButton(text="üí≠ –¶–∏—Ç–∞—Ç—ã", callback_data="quotes"),
            InlineKeyboardButton(text="üé≤ –ò–≥—Ä—ã", callback_data="games")
        ],
        [
            InlineKeyboardButton(text="üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", callback_data="predictions"),
            InlineKeyboardButton(text="üé™ –§–∞–∫—Ç—ã", callback_data="facts")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_utilities_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì± QR –∫–æ–¥", callback_data="qr_generator"),
            InlineKeyboardButton(text="üåê IP –∏–Ω—Ñ–æ", callback_data="ip_info")
        ],
        [
            InlineKeyboardButton(text="üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", callback_data="translator"),
            InlineKeyboardButton(text="üé® –¶–≤–µ—Ç–∞", callback_data="colors")
        ],
        [
            InlineKeyboardButton(text="üìè –ï–¥–∏–Ω–∏—Ü—ã", callback_data="converter"),
            InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator")
        ],
        [
            InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar"),
            InlineKeyboardButton(text="‚è∞ –¢–∞–π–º–µ—Ä—ã", callback_data="timers")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

def get_food_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üçΩ –†–µ—Ü–µ–ø—Ç—ã", callback_data="recipes"),
            InlineKeyboardButton(text="ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", callback_data="healthy_food")
        ],
        [
            InlineKeyboardButton(text="üçï –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ", callback_data="random_meal"),
            InlineKeyboardButton(text="üç∑ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="cocktails")
        ],
        [
            InlineKeyboardButton(text="üßÅ –î–µ—Å–µ—Ä—Ç—ã", callback_data="desserts"),
            InlineKeyboardButton(text="üåç –ö—É—Ö–Ω–∏ –º–∏—Ä–∞", callback_data="world_cuisine")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async def make_request(url, params=None, timeout=10):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    return await response.json()
                return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
        return None

async def get_crypto_price(crypto_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ CoinGecko API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"""
    url = f"https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": crypto_id,
        "vs_currencies": "usd,rub",
        "include_24hr_change": "true",
        "include_market_cap": "true"
    }
    
    data = await make_request(url, params)
    if data and crypto_id in data:
        return data[crypto_id]
    return None

async def get_top_crypto(limit=15):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",
        "order": "market_cap_desc",
        "per_page": limit,
        "page": 1,
        "sparkline": "false"
    }
    
    return await make_request(url, params)

async def get_trending_crypto():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    url = "https://api.coingecko.com/api/v3/search/trending"
    return await make_request(url)

async def get_weather_free(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –±–µ–∑ API –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ wttr.in"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    sources = [
        f"https://wttr.in/{quote(city)}?format=j1",
        f"https://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&lang=ru&appid=demo"  # demo –∫–ª—é—á
    ]
    
    for url in sources:
        data = await make_request(url)
        if data:
            if "current_condition" in data:  # wttr.in format
                current = data["current_condition"][0]
                return {
                    "name": city,
                    "temp": int(current["temp_C"]),
                    "feels_like": int(current["FeelsLikeC"]),
                    "humidity": int(current["humidity"]),
                    "description": current["weatherDesc"][0]["value"],
                    "wind_speed": round(float(current["windspeedKmph"]) / 3.6, 1)  # –ö–æ–Ω–≤–µ—Ä—Ç –≤ –º/—Å
                }
            elif "main" in data:  # OpenWeather format
                return {
                    "name": data.get("name", city),
                    "temp": round(data["main"]["temp"]),
                    "feels_like": round(data["main"]["feels_like"]),
                    "humidity": data["main"]["humidity"],
                    "description": data["weather"][0]["description"],
                    "wind_speed": data["wind"]["speed"]
                }
    
    return None

async def get_joke():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–µ–∫–¥–æ—Ç–∞"""
    sources = [
        "https://v2.jokeapi.dev/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist,explicit",
        "https://official-joke-api.appspot.com/random_joke"
    ]
    
    for url in sources:
        data = await make_request(url)
        if data:
            if "joke" in data:  # Single joke
                return data["joke"]
            elif "setup" in data and "delivery" in data:  # Two-part joke
                return f"{data['setup']}\n\n{data['delivery']}"
            elif "setup" in data and "punchline" in data:  # Alternative format
                return f"{data['setup']}\n\n{data['punchline']}"
    
    # Fallback –∞–Ω–µ–∫–¥–æ—Ç—ã
    fallback_jokes = [
        "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –Ω–µ—Ç –±–∞–≥–æ–≤!",
        "–ö–∞–∫ –Ω–∞–∑–≤–∞—Ç—å –∫–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞? –ö–æ–¥–µ—Ä!",
        "–ü–æ—á–µ–º—É —É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –ø–ª–æ—Ö–∞—è –æ—Å–∞–Ω–∫–∞? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –≤—Å–µ–≥–¥–∞ —Å–∫–ª–æ–Ω—è—é—Ç—Å—è –Ω–∞–¥ –∫–æ–¥–æ–º!",
        "–ß—Ç–æ –æ–±—â–µ–≥–æ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –∏ –≤–æ–ª—à–µ–±–Ω–∏–∫–æ–º? –û–±–∞ —Å–æ–∑–¥–∞—é—Ç —á—Ç–æ-—Ç–æ –∏–∑ –Ω–∏—á–µ–≥–æ!",
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ª–∞–º–ø–æ—á–∫—É? –ù–∏ –æ–¥–Ω–æ–≥–æ - —ç—Ç–æ –∞–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!"
    ]
    return random.choice(fallback_jokes)

async def get_cat_image():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–æ—Ç–∞"""
    sources = [
        "https://api.thecatapi.com/v1/images/search",
        "https://cataas.com/cat?json=true",
        "https://aws.random.cat/meow"
    ]
    
    for url in sources:
        data = await make_request(url)
        if data:
            if isinstance(data, list) and len(data) > 0:
                return data[0].get("url")
            elif "file" in data:  # random.cat format
                return data["file"]
            elif "url" in data:  # cataas format
                return f"https://cataas.com{data['url']}"
    
    return None

async def get_dog_image():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–±–∞–∫–∏"""
    sources = [
        "https://dog.ceo/api/breeds/image/random",
        "https://random.dog/woof.json"
    ]
    
    for url in sources:
        data = await make_request(url)
        if data:
            if "message" in data:  # dog.ceo format
                return data["message"]
            elif "url" in data:  # random.dog format
                return data["url"]
    
    return None

async def get_activity():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    url = "https://www.boredapi.com/api/activity"
    data = await make_request(url)
    
    if data and "activity" in data:
        activity = data["activity"]
        activity_type = data.get("type", "–†–∞–∑–Ω–æ–µ")
        participants = data.get("participants", 1)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        type_translations = {
            "education": "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
            "recreational": "üéÆ –û—Ç–¥—ã—Ö",
            "social": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ",
            "diy": "üî® –°–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏",
            "charity": "‚ù§Ô∏è –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "cooking": "üç≥ –ì–æ—Ç–æ–≤–∫–∞",
            "relaxation": "üòå –†–µ–ª–∞–∫—Å–∞—Ü–∏—è",
            "music": "üéµ –ú—É–∑—ã–∫–∞",
            "busywork": "üíº –†–∞–±–æ—Ç–∞"
        }
        
        activity_type_ru = type_translations.get(activity_type.lower(), f"üéØ {activity_type}")
        
        return {
            "activity": activity,
            "type": activity_type_ru,
            "participants": participants
        }
    
    # Fallback –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activities = [
        {"activity": "–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", "type": "üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "participants": 1},
        {"activity": "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ —Å—Ç–∞—Ä–æ–º—É –¥—Ä—É–≥—É", "type": "üë• –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ", "participants": 1},
        {"activity": "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ", "type": "üç≥ –ì–æ—Ç–æ–≤–∫–∞", "participants": 1},
        {"activity": "–°–¥–µ–ª–∞–π—Ç–µ –∑–∞—Ä—è–¥–∫—É", "type": "üí™ –°–ø–æ—Ä—Ç", "participants": 1},
        {"activity": "–ü–æ—Å–ª—É—à–∞–π—Ç–µ –Ω–æ–≤—É—é –º—É–∑—ã–∫—É", "type": "üéµ –ú—É–∑—ã–∫–∞", "participants": 1}
    ]
    return random.choice(activities)

async def get_quote():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã"""
    sources = [
        "https://api.quotable.io/random",
        "https://zenquotes.io/api/random"
    ]
    
    for url in sources:
        data = await make_request(url)
        if data:
            if isinstance(data, list):
                data = data[0]
            
            content = data.get("content", data.get("q", ""))
            author = data.get("author", data.get("a", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"))
            
            if content:
                return {"content": content, "author": author}
    
    # Fallback —Ü–∏—Ç–∞—Ç—ã
    quotes = [
        {"content": "–ñ–∏–∑–Ω—å - —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã —Å—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã", "author": "–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω"},
        {"content": "–ë—É–¥—å—Ç–µ —Å–æ–±–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã", "author": "–û—Å–∫–∞—Ä –£–∞–π–ª—å–¥"},
        {"content": "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º –∑–∞–≤—Ç—Ä–∞", "author": "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¶–∏–æ–ª–∫–æ–≤—Å–∫–∏–π"},
        {"content": "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ - –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å", "author": "–°—Ç–∏–≤ –î–∂–æ–±—Å"}
    ]
    return random.choice(quotes)

async def get_fact():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    sources = [
        "https://uselessfacts.jsph.pl/random.json?language=en",
        "https://catfact.ninja/fact"
    ]
    
    for url in sources:
        data = await make_request(url)
        if data:
            fact = data.get("text", data.get("fact", ""))
            if fact:
                return fact
    
    # Fallback —Ñ–∞–∫—Ç—ã
    facts = [
        "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–∏–Ω—é—é –∫—Ä–æ–≤—å",
        "–ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è - –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç",
        "–ë–∞–Ω–∞–Ω—ã —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã –∏–∑-–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞–ª–∏—è-40",
        "–ê–∫—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤ - –±–æ–ª–µ–µ 400 –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–µ—Ç",
        "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 86 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –Ω–µ–π—Ä–æ–Ω–æ–≤"
    ]
    return random.choice(facts)

async def get_ip_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± IP"""
    url = "https://ipapi.co/json/"
    data = await make_request(url)
    
    if data:
        return {
            "ip": data.get("ip", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"),
            "city": data.get("city", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"),
            "region": data.get("region", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"),
            "country": data.get("country_name", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"),
            "timezone": data.get("timezone", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"),
            "isp": data.get("org", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        }
    
    return None

async def get_color_info(hex_color):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–≤–µ—Ç–µ"""
    # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
    hex_color = hex_color.replace("#", "")
    
    url = f"https://www.thecolorapi.com/id?hex={hex_color}"
    data = await make_request(url)
    
    if data:
        return {
            "hex": data.get("hex", {}).get("value", f"#{hex_color}"),
            "name": data.get("name", {}).get("value", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
            "rgb": f"RGB({data.get('rgb', {}).get('r', 0)}, {data.get('rgb', {}).get('g', 0)}, {data.get('rgb', {}).get('b', 0)})",
            "hsl": f"HSL({data.get('hsl', {}).get('h', 0)}, {data.get('hsl', {}).get('s', 0)}%, {data.get('hsl', {}).get('l', 0)}%)"
        }
    
    return None

def generate_qr_url(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è QR –∫–æ–¥–∞"""
    encoded_text = quote(text)
    return f"https://api.qrserver.com/v1/create-qr-code/?size=300x300&data={encoded_text}"

def get_back_keyboard(callback_data="back_to_main"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    update_user_stats(user_id, "start")
    
    welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!**

–Ø —Å—É–ø–µ—Ä—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:

üíé **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã** - –∫—É—Ä—Å—ã, –Ω–æ–≤–æ—Å—Ç–∏, —Ç—Ä–µ–Ω–¥–∏–Ω–≥
üå§ **–ü–æ–≥–æ–¥–∞** - –ø—Ä–æ–≥–Ω–æ–∑ –±–µ–∑ API –∫–ª—é—á–µ–π
üé¨ **–§–∏–ª—å–º—ã** - –ø–æ–∏—Å–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üòÇ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è** - –∞–Ω–µ–∫–¥–æ—Ç—ã, –º–µ–º—ã, –∏–≥—Ä—ã
üîß **–£—Ç–∏–ª–∏—Ç—ã** - QR –∫–æ–¥—ã, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫, –∫–æ–Ω–≤–µ—Ä—Ç–µers
üçî **–ï–¥–∞** - —Ä–µ—Ü–µ–ø—Ç—ã –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
üé® **–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ** - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
üì± **–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ** - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

‚ú® **–í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
@dp.callback_query(F.data == "crypto")
async def crypto_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "crypto_menu")
    
    text = """
üíé **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä**

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
‚Ä¢ üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã  
‚Ä¢ üí± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
‚Ä¢ üì∞ –ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await callback.message.edit_text(text, reply_markup=get_crypto_keyboard())

@dp.callback_query(F.data.startswith("crypto_"))
async def crypto_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data.replace("crypto_", "")
    update_user_stats(user_id, f"crypto_{action}")
    
    if action == "top15":
        await callback.message.edit_text("üîÑ **–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø-15 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...**")
        
        top_crypto = await get_top_crypto(15)
        if top_crypto:
            text = "üìä **–¢–æ–ø-15 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:**\n\n"
            
            for i, coin in enumerate(top_crypto, 1):
                name = coin["name"]
                symbol = coin["symbol"].upper()
                price = coin["current_price"]
                change = coin["price_change_percentage_24h"] or 0
                market_cap = coin["market_cap"]
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                if change > 5:
                    change_emoji = "üöÄ"
                elif change > 0:
                    change_emoji = "üìà"
                elif change > -5:
                    change_emoji = "üìâ"
                else:
                    change_emoji = "üîª"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
                if market_cap > 1000000000000:  # —Ç—Ä–ª–Ω
                    cap_str = f"${market_cap/1000000000000:.1f}T"
                elif market_cap > 1000000000:  # –º–ª—Ä–¥
                    cap_str = f"${market_cap/1000000000:.1f}B"
                else:  # –º–ª–Ω
                    cap_str = f"${market_cap/1000000:.0f}M"
                
                text += f"**{i}.** {name} ({symbol})\n"
                text += f"üí∞ ${price:,.4f} {change_emoji} {change:+.1f}%\n"
                text += f"üìä –ö–∞–ø: {cap_str}\n\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="crypto_top15"),
                    InlineKeyboardButton(text="üìà –¢—Ä–µ–Ω–¥–∏–Ω–≥", callback_data="crypto_trending")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=get_back_keyboard("crypto")
            )
    
    elif action == "trending":
        await callback.message.edit_text("üî• **–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã...**")
        
        trending_data = await get_trending_crypto()
        if trending_data and "coins" in trending_data:
            text = "üî• **–°–µ–π—á–∞—Å –≤ —Ç—Ä–µ–Ω–¥–µ:**\n\n"
            
            for i, coin in enumerate(trending_data["coins"][:10], 1):
                coin_data = coin["item"]
                name = coin_data["name"]
                symbol = coin_data["symbol"].upper()
                rank = coin_data.get("market_cap_rank", "?")
                
                text += f"**{i}.** {name} ({symbol})\n"
                text += f"üìä –†–∞–Ω–≥: #{rank}\n"
                text += f"üî• –¢—Ä–µ–Ω–¥–∏–Ω–≥ #{i}\n\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="crypto_trending"),
                    InlineKeyboardButton(text="üìä –¢–æ–ø-15", callback_data="crypto_top15")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ**",
                reply_markup=get_back_keyboard("crypto")
            )
    
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        await callback.message.edit_text(f"üîÑ **–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {action}...**")
        
        crypto_data = await get_crypto_price(action)
        if crypto_data:
            usd_price = crypto_data.get("usd", 0)
            rub_price = crypto_data.get("rub", 0)
            change_24h = crypto_data.get("usd_24h_change", 0)
            market_cap = crypto_data.get("usd_market_cap", 0)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            names = {
                "bitcoin": "Bitcoin (BTC)",
                "ethereum": "Ethereum (ETH)",
                "binancecoin": "BNB",
                "cardano": "Cardano (ADA)",
                "solana": "Solana (SOL)",
                "dogecoin": "Dogecoin (DOGE)"
            }
            
            crypto_name = names.get(action, action.title())
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if change_24h > 5:
                change_emoji = "üöÄ"
            elif change_24h > 0:
                change_emoji = "üìà"
            elif change_24h > -5:
                change_emoji = "üìâ"
            else:
                change_emoji = "üîª"
            
            text = f"üí∞ **{crypto_name}**\n\n"
            text += f"üíµ **${usd_price:,.2f}**\n"
            text += f"üá∑üá∫ **‚ÇΩ{rub_price:,.2f}**\n\n"
            text += f"{change_emoji} **24—á: {change_24h:+.2f}%**\n"
            
            if market_cap > 0:
                if market_cap > 1000000000000:
                    cap_str = f"${market_cap/1000000000000:.1f}T"
                elif market_cap > 1000000000:
                    cap_str = f"${market_cap/1000000000:.1f}B"
                else:
                    cap_str = f"${market_cap/1000000:.0f}M"
                text += f"üìä **–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {cap_str}**\n"
            
            text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"crypto_{action}"),
                    InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_crypto_{action}")
                ],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="crypto")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {action}",
                reply_markup=get_back_keyboard("crypto")
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
@dp.callback_query(F.data == "weather")
async def weather_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    update_user_stats(user_id, "weather")
    
    await callback.message.edit_text(
        "üå§ **–ü–æ–≥–æ–¥–∞**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(AppStates.waiting_for_city)

@dp.message(AppStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    user_id = message.from_user.id
    city = message.text
    
    await message.answer(f"üå§ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è {city}...")
    
    weather_data = await get_weather_free(city)
    if weather_data:
        text = f"üå§ **–ü–æ–≥–æ–¥–∞ –≤ {weather_data['name']}**\n\n"
        text += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['temp']}¬∞C\n"
        text += f"üí≠ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather_data['feels_like']}¬∞C\n"
        text += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['humidity']}%\n"
        text += f"üå¨ –í–µ—Ç–µ—Ä: {weather_data['wind_speed']} –º/—Å\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {weather_data['description']}\n\n"
        text += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"weather_refresh_{city}"),
                InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_weather_{city}")
            ],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.",
            reply_markup=get_back_keyboard()
        )
    
    await state.clear()

@dp.callback_query(F.data == "entertainment")
async def entertainment_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "entertainment")
    
    text = """
üòÇ **–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
‚Ä¢ üòÇ –ê–Ω–µ–∫–¥–æ—Ç—ã - —Å–ª—É—á–∞–π–Ω—ã–µ —à—É—Ç–∫–∏
‚Ä¢ üê± –ö–æ—Ç–∏–∫–∏ - –º–∏–ª—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
‚Ä¢ üê∂ –°–æ–±–∞—á–∫–∏ - –∑–∞–±–∞–≤–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã
‚Ä¢ üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è
‚Ä¢ üí≠ –¶–∏—Ç–∞—Ç—ã - –º—É–¥—Ä—ã–µ –º—ã—Å–ª–∏
‚Ä¢ üé≤ –ò–≥—Ä—ã - –º–∏–Ω–∏-–∏–≥—Ä—ã
‚Ä¢ üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è - —á—Ç–æ –∂–¥–µ—Ç –≤ –±—É–¥—É—â–µ–º
‚Ä¢ üé™ –§–∞–∫—Ç—ã - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
"""
    await callback.message.edit_text(text, reply_markup=get_entertainment_keyboard())

@dp.callback_query(F.data == "jokes")
async def jokes_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "jokes")
    
    await callback.message.edit_text("üòÇ –ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–µ–∫–¥–æ—Ç...")
    
    joke = await get_joke()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üòÇ –ï—â–µ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="jokes"),
            InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_joke_{hash(joke)}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")]
    ])
    
    await callback.message.edit_text(f"üòÇ **–ê–Ω–µ–∫–¥–æ—Ç:**\n\n{joke}", reply_markup=keyboard)

@dp.callback_query(F.data == "cats")
async def cats_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "cats")
    
    await callback.message.edit_text("üê± –ó–∞–≥—Ä—É–∂–∞—é –∫–æ—Ç–∏–∫–∞...")
    
    cat_url = await get_cat_image()
    
    if cat_url:
        async with aiohttp.ClientSession() as session:
            async with session.get(cat_url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    photo = BufferedInputFile(image_data, filename="cat.jpg")
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üê± –ï—â–µ –∫–æ—Ç–∏–∫", callback_data="cats"),
                            InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_cat_{hash(cat_url)}")
                        ],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")]
                    ])
                    
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=photo,
                        caption="üê± **–í–æ—Ç –≤–∞—à –∫–æ—Ç–∏–∫!**",
                        reply_markup=keyboard
                    )
                    return
    
    await callback.message.edit_text(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        reply_markup=get_back_keyboard("entertainment")
    )

@dp.callback_query(F.data == "dogs")
async def dogs_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "dogs")
    
    await callback.message.edit_text("üê∂ –ó–∞–≥—Ä—É–∂–∞—é —Å–æ–±–∞—á–∫—É...")
    
    dog_url = await get_dog_image()
    
    if dog_url:
        async with aiohttp.ClientSession() as session:
            async with session.get(dog_url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    photo = BufferedInputFile(image_data, filename="dog.jpg")
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üê∂ –ï—â–µ —Å–æ–±–∞—á–∫–∞", callback_data="dogs"),
                            InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_dog_{hash(dog_url)}")
                        ],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")]
                    ])
                    
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo=photo,
                        caption="üê∂ **–í–æ—Ç –≤–∞—à–∞ —Å–æ–±–∞—á–∫–∞!**",
                        reply_markup=keyboard
                    )
                    return
    
    await callback.message.edit_text(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±–∞—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        reply_markup=get_back_keyboard("entertainment")
    )

@dp.callback_query(F.data == "activities")
async def activities_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "activities")
    
    await callback.message.edit_text("üéØ –ò—â—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...")
    
    activity_data = await get_activity()
    
    text = f"üéØ **{activity_data['type']}**\n\n"
    text += f"{activity_data['activity']}\n\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {activity_data['participants']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéØ –î—Ä—É–≥–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="activities"),
            InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_activity_{hash(text)}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "quotes")
async def quotes_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "quotes")
    
    await callback.message.edit_text("üí≠ –ò—â—É —Ü–∏—Ç–∞—Ç—É...")
    
    quote_data = await get_quote()
    
    text = f"üí≠ **–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è**\n\n"
    text += f"_{quote_data['content']}_\n\n"
    text += f"‚Äî {quote_data['author']}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≠ –ï—â–µ —Ü–∏—Ç–∞—Ç–∞", callback_data="quotes"),
            InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_quote_{hash(text)}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "facts")
async def facts_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "facts")
    
    await callback.message.edit_text("üé™ –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç...")
    
    fact = await get_fact()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé™ –ï—â–µ —Ñ–∞–∫—Ç", callback_data="facts"),
            InlineKeyboardButton(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_fact_{hash(fact)}")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="entertainment")]
    ])
    
    await callback.message.edit_text(f"üé™ **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**\n\n{fact}", reply_markup=keyboard)

@dp.callback_query(F.data == "utilities")
async def utilities_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "utilities")
    
    text = """
üîß **–£—Ç–∏–ª–∏—Ç—ã**

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:
‚Ä¢ üì± QR –∫–æ–¥ - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR –∫–æ–¥–æ–≤
‚Ä¢ üåê IP –∏–Ω—Ñ–æ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º IP
‚Ä¢ üî§ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ - –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ üé® –¶–≤–µ—Ç–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö
‚Ä¢ üìè –ï–¥–∏–Ω–∏—Ü—ã - –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü
‚Ä¢ üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
‚Ä¢ üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—Ç
‚Ä¢ ‚è∞ –¢–∞–π–º–µ—Ä—ã - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
"""
    await callback.message.edit_text(text, reply_markup=get_utilities_keyboard())

@dp.callback_query(F.data == "qr_generator")
async def qr_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    update_user_stats(user_id, "qr_generator")
    
    await callback.message.edit_text(
        "üì± **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä QR –∫–æ–¥–æ–≤**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ URL:",
        reply_markup=get_back_keyboard("utilities")
    )
    await state.set_state(AppStates.waiting_for_qr_text)

@dp.message(AppStates.waiting_for_qr_text)
async def process_qr_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    
    qr_url = generate_qr_url(text)
    
    async with aiohttp.ClientSession() as session:
        async with session.get(qr_url) as response:
            if response.status == 200:
                image_data = await response.read()
                photo = BufferedInputFile(image_data, filename="qrcode.png")
                
                await message.answer_photo(
                    photo=photo,
                    caption=f"üì± QR –∫–æ–¥ –¥–ª—è: {text}",
                    reply_markup=get_back_keyboard("utilities")
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥",
                    reply_markup=get_back_keyboard("utilities")
                )
    
    await state.clear()

@dp.callback_query(F.data == "ip_info")
async def ip_info_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "ip_info")
    
    await callback.message.edit_text("üåê –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º IP...")
    
    ip_data = await get_ip_info()
    
    if ip_data:
        text = "üåê **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º IP:**\n\n"
        text += f"üì° IP-–∞–¥—Ä–µ—Å: `{ip_data['ip']}`\n"
        text += f"üèô –ì–æ—Ä–æ–¥: {ip_data['city']}\n"
        text += f"üèõ –†–µ–≥–∏–æ–Ω: {ip_data['region']}\n"
        text += f"üá∑üá∫ –°—Ç—Ä–∞–Ω–∞: {ip_data['country']}\n"
        text += f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {ip_data['timezone']}\n"
        text += f"üì∂ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {ip_data['isp']}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ip_info")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="utilities")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP",
            reply_markup=get_back_keyboard("utilities")
        )

@dp.callback_query(F.data == "colors")
async def colors_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    update_user_stats(user_id, "colors")
    
    await callback.message.edit_text(
        "üé® **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–µ**\n\n–í–≤–µ–¥–∏—Ç–µ HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #FF5733):",
        reply_markup=get_back_keyboard("utilities")
    )
    await state.set_state(AppStates.waiting_for_color_hex)

@dp.message(AppStates.waiting_for_color_hex)
async def process_color_hex(message: Message, state: FSMContext):
    user_id = message.from_user.id
    hex_color = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç HEX
    import re
    if not re.match(r'^#?[0-9A-Fa-f]{6}$', hex_color):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç HEX-–∫–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç #FF5733 –∏–ª–∏ FF5733",
            reply_markup=get_back_keyboard("utilities")
        )
        return
    
    await message.answer(f"üé® –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–µ {hex_color}...")
    
    color_info = await get_color_info(hex_color)
    
    if color_info:
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Ü–≤–µ—Ç–æ–º
        from PIL import Image, ImageDraw
        import io
        
        img = Image.new('RGB', (200, 200), color=hex_color)
        draw = ImageDraw.Draw(img)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        img.save(buf, format='PNG')
        buf.seek(0)
        
        photo = BufferedInputFile(buf.getvalue(), filename="color.png")
        
        text = f"üé® **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–µ**\n\n"
        text += f"üé® –ù–∞–∑–≤–∞–Ω–∏–µ: {color_info['name']}\n"
        text += f"üî∑ HEX: {color_info['hex']}\n"
        text += f"üî∂ RGB: {color_info['rgb']}\n"
        text += f"üî∑ HSL: {color_info['hsl']}"
        
        await message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=get_back_keyboard("utilities")
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–µ",
            reply_markup=get_back_keyboard("utilities")
        )
    
    await state.clear()

@dp.callback_query(F.data == "food")
async def food_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "food")
    
    text = """
üçî **–ï–¥–∞ –∏ —Ä–µ—Ü–µ–ø—Ç—ã**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
‚Ä¢ üçΩ –†–µ—Ü–µ–ø—Ç—ã - –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
‚Ä¢ ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ üçï –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ - —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
‚Ä¢ üç∑ –ö–æ–∫—Ç–µ–π–ª–∏ - —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞–ø–∏—Ç–∫–æ–≤
‚Ä¢ üßÅ –î–µ—Å–µ—Ä—Ç—ã - —Å–ª–∞–¥–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
‚Ä¢ üåç –ö—É—Ö–Ω–∏ –º–∏—Ä–∞ - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫—É—Ö–Ω—è
"""
    await callback.message.edit_text(text, reply_markup=get_food_keyboard())

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "back_to_main")
    
    welcome_text = f"""
üöÄ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
    await callback.message.edit_text(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
@dp.callback_query(F.data == "movies")
async def movies_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "movies")
    
    await callback.message.edit_text(
        "üé¨ **–†–∞–∑–¥–µ–ª —Ñ–∏–ª—å–º–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!",
        reply_markup=get_back_keyboard()
    )

@dp.callback_query(F.data == "social")
async def social_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "social")
    
    await callback.message.edit_text(
        "üì± **–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!",
        reply_markup=get_back_keyboard()
    )

@dp.callback_query(F.data == "creative")
async def creative_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "creative")
    
    await callback.message.edit_text(
        "üé® **–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!",
        reply_markup=get_back_keyboard()
    )

@dp.callback_query(F.data == "settings")
async def settings_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "settings")
    
    init_user_data(user_id)
    
    text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ üåê –Ø–∑—ã–∫: {user_data[user_id]['settings']['language']}
‚Ä¢ üé® –¢–µ–º–∞: {user_data[user_id]['settings']['theme']}

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåê –Ø–∑—ã–∫", callback_data="set_language"),
            InlineKeyboardButton(text="üé® –¢–µ–º–∞", callback_data="set_theme")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data == "stats")
async def stats_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_stats(user_id, "stats")
    
    init_user_data(user_id)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
    total_actions = sum(user_stats[user_id].values()) if user_id in user_stats else 0
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    top_actions = []
    if user_id in user_stats:
        sorted_actions = sorted(user_stats[user_id].items(), key=lambda x: x[1], reverse=True)
        top_actions = sorted_actions[:5]  # –¢–æ–ø-5 –¥–µ–π—Å—Ç–≤–∏–π
    
    text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.first_name}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data[user_id]['last_activity'].strftime('%Y-%m-%d %H:%M')}
üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {user_data[user_id]['streak']}
üìà –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}

üèÜ **–¢–æ–ø –¥–µ–π—Å—Ç–≤–∏–π:**
"""
    
    for i, (action, count) in enumerate(top_actions, 1):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        action_names = {
            "start": "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
            "crypto": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
            "weather": "–ü–æ–≥–æ–¥–∞",
            "jokes": "–ê–Ω–µ–∫–¥–æ—Ç—ã",
            "cats": "–ö–æ—Ç–∏–∫–∏",
            "dogs": "–°–æ–±–∞—á–∫–∏",
            "activities": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "quotes": "–¶–∏—Ç–∞—Ç—ã",
            "facts": "–§–∞–∫—Ç—ã",
            "ip_info": "IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "qr_generator": "QR –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
            "colors": "–¶–≤–µ—Ç–∞"
        }
        
        action_name = action_names.get(action, action)
        text += f"{i}. {action_name}: {count}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())