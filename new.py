import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import asyncio
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8265769208:AAH3R9aTPOwMWV5ir5SjIRQMNPzTbaYI18k"
TRACKED_COINS = {
    'bitcoin': {'symbol': 'BTC', 'threshold': 2.0},
    'ethereum': {'symbol': 'ETH', 'threshold': 3.0},
    'the-open-network': {'symbol': 'TON', 'threshold': 5.0},
    'binancecoin': {'symbol': 'BNB', 'threshold': 4.0},
    'solana': {'symbol': 'SOL', 'threshold': 6.0},
    'cardano': {'symbol': 'ADA', 'threshold': 5.0},
    'ripple': {'symbol': 'XRP', 'threshold': 4.0},
    'dogecoin': {'symbol': 'DOGE', 'threshold': 8.0}
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_settings = {}
last_updates = {}

class CryptoMonitor:
    def __init__(self):
        self.last_prices = {}
        
    async def get_prices(self, coin_ids=None):
        if not coin_ids:
            coin_ids = list(TRACKED_COINS.keys())
            
        url = 'https://api.coingecko.com/api/v3/simple/price'
        params = {
            'ids': ','.join(coin_ids),
            'vs_currencies': 'usd',
            'include_24hr_change': 'true',
            'include_last_updated_at': 'true'
        }
        
        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    async def get_coin_list(self):
        url = 'https://api.coingecko.com/api/v3/coins/list'
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response.json()
        except:
            return None

    async def check_price_changes(self, context: ContextTypes.DEFAULT_TYPE):
        current_prices = await self.get_prices()
        if not current_prices:
            return
            
        for chat_id in user_settings:
            if not user_settings[chat_id].get('active', True):
                continue
                
            for coin_id, data in TRACKED_COINS.items():
                if coin_id not in current_prices:
                    continue
                    
                current_price = current_prices[coin_id]['usd']
                change_24h = current_prices[coin_id].get('usd_24h_change', 0)
                
                if coin_id not in self.last_prices:
                    self.last_prices[coin_id] = current_price
                    continue
                
                threshold = user_settings[chat_id].get('thresholds', {}).get(coin_id, data['threshold'])
                change = ((current_price - self.last_prices[coin_id]) / self.last_prices[coin_id]) * 100
                
                if abs(change) >= threshold:
                    message = (f"üö® {data['symbol']}: ${current_price:.2f}\n"
                              f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.2f}%\n"
                              f"üìä 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change_24h:+.2f}%")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    last_update_key = f"{chat_id}_{coin_id}"
                    if last_update_key not in last_updates or (datetime.now() - last_updates[last_update_key]).seconds > 300:
                        await context.bot.send_message(chat_id=chat_id, text=message)
                        last_updates[last_update_key] = datetime.now()
            
            self.last_prices[coin_id] = current_price

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_settings[chat_id] = {'active': True, 'thresholds': {}}
    
    keyboard = [
        [KeyboardButton("üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoMonitorBot!\n\n"
        "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'monitor' not in context.bot_data:
        context.bot_data['monitor'] = CryptoMonitor()
        context.job_queue.run_repeating(
            context.bot_data['monitor'].check_price_changes,
            interval=300,
            first=10
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id
    
    if text == "üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã":
        prices = await context.bot_data['monitor'].get_prices()
        if not prices:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
            
        message = "üí± –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
        for coin_id, data in TRACKED_COINS.items():
            if coin_id in prices:
                price = prices[coin_id]['usd']
                change = prices[coin_id].get('usd_24h_change', 0)
                message += f"{data['symbol']}: ${price:.2f} ({change:+.2f}%)\n"
        
        await update.message.reply_text(message)
    
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_message = (
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if user_settings[chat_id]['active'] else '–í–´–ö–õ'}\n\n"
            "–ü–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        )
        
        for coin_id, data in TRACKED_COINS.items():
            threshold = user_settings[chat_id].get('thresholds', {}).get(coin_id, data['threshold'])
            settings_message += f"{data['symbol']}: {threshold}%\n"
            
        settings_message += "\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: COIN –ø–æ—Ä–æ–≥\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTC 3.5"
        
        await update.message.reply_text(settings_message)
    
    elif text == "üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        user_settings[chat_id]['active'] = not user_settings[chat_id]['active']
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if user_settings[chat_id]['active'] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await update.message.reply_text(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!")
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        help_text = (
            "ü§ñ CryptoMonitorBot - –ø–æ–º–æ—â—å\n\n"
            "–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "üîî –í–∫–ª/–í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "COIN –ø–æ—Ä–æ–≥\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTC 3.5\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é: " + ", ".join([data['symbol'] for data in TRACKED_COINS.values()])
        )
        await update.message.reply_text(help_text)
    
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        parts = text.split()
        if len(parts) == 2:
            coin_symbol, threshold_str = parts
            try:
                threshold = float(threshold_str)
                if threshold <= 0:
                    await update.message.reply_text("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                    return
                    
                # –ù–∞—Ö–æ–¥–∏–º –º–æ–Ω–µ—Ç—É –ø–æ —Å–∏–º–≤–æ–ª—É
                coin_id = None
                for cid, data in TRACKED_COINS.items():
                    if data['symbol'].lower() == coin_symbol.lower():
                        coin_id = cid
                        break
                
                if coin_id:
                    if 'thresholds' not in user_settings[chat_id]:
                        user_settings[chat_id]['thresholds'] = {}
                    user_settings[chat_id]['thresholds'][coin_id] = threshold
                    await update.message.reply_text(f"–ü–æ—Ä–æ–≥ –¥–ª—è {TRACKED_COINS[coin_id]['symbol']} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {threshold}%!")
                else:
                    await update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞: " + ", ".join([data['symbol'] for data in TRACKED_COINS.values()]))
            except ValueError:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: COIN –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC 3.5)")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")

if __name__ == '__main__':
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()