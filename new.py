import os
import re
import requests
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
from urllib.parse import quote_plus
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8265769208:AAH3R9aTPOwMWV5ir5SjIRQMNPzTbaYI18k"  # –í–∞—à —Ç–æ–∫–µ–Ω
DOWNLOAD_DIR = "downloads"
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Telegram

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
async def download_youtube_video(url, quality='best'):
    ydl_opts = {
        'format': 'bestvideo[height<=480]+bestaudio/best[height<=480]' if quality == 'low' else 'best',
        'outtmpl': os.path.join(DOWNLOAD_DIR, '%(title)s.%(ext)s'),
        'merge_output_format': 'mp4',
        'quiet': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filepath = ydl.prepare_filename(info)
            if not os.path.exists(filepath):
                filepath = filepath.rsplit('.', 1)[0] + '.mp4'
            return filepath, info.get('title', 'video')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YouTube –≤–∏–¥–µ–æ: {e}")
        return None, None

async def download_tiktok_video(url):
    ydl_opts = {
        'outtmpl': os.path.join(DOWNLOAD_DIR, '%(title)s.%(ext)s'),
        'quiet': True,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filepath = ydl.prepare_filename(info)
            return filepath, info.get('title', 'video')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TikTok –≤–∏–¥–µ–æ: {e}")
        return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
async def search_music(query):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º YouTube –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
    search_url = f"https://www.youtube.com/results?search_query={quote_plus(query)}"
    
    try:
        response = requests.get(search_url)
        video_ids = re.findall(r'watch\?v=(\S{11})', response.text)
        
        if not video_ids:
            return None, None
            
        video_url = f"https://www.youtube.com/watch?v={video_ids[0]}"
        
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': os.path.join(DOWNLOAD_DIR, '%(title)s.%(ext)s'),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'quiet': True,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(video_url, download=True)
            filepath = ydl.prepare_filename(info).rsplit('.', 1)[0] + '.mp3'
            return filepath, info.get('title', 'audio')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏: {e}")
        return None, None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ TikTok –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ —è –Ω–∞–π–¥—É —ç—Ç—É –º—É–∑—ã–∫—É –¥–ª—è —Ç–µ–±—è."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "üé• –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ TikTok –≤–∏–¥–µ–æ\n\n"
        "üéµ –î–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏:\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ https://www.youtube.com/watch?v=...\n"
        "‚Ä¢ https://www.tiktok.com/@.../video/...\n"
        "‚Ä¢ @taylor swift shake it off\n"
        "‚Ä¢ #eminem lose yourself"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π
    if 'youtube.com/' in message_text or 'youtu.be/' in message_text:
        # –≠—Ç–æ YouTube —Å—Å—ã–ª–∫–∞
        await update.message.reply_text("üé• –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É YouTube –≤–∏–¥–µ–æ...")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞
        keyboard = [
            [
                InlineKeyboardButton("–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data=f"youtube_best_{message_text}"),
                InlineKeyboardButton("–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", callback_data=f"youtube_low_{message_text}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
            reply_markup=reply_markup
        )
        
    elif 'tiktok.com/' in message_text:
        # –≠—Ç–æ TikTok —Å—Å—ã–ª–∫–∞
        await update.message.reply_text("üéµ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É TikTok –≤–∏–¥–µ–æ...")
        filepath, title = await download_tiktok_video(message_text)
        
        if filepath and os.path.exists(filepath):
            file_size = os.path.getsize(filepath)
            
            if file_size > MAX_FILE_SIZE:
                await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.")
            else:
                await update.message.reply_video(
                    video=open(filepath, 'rb'),
                    caption=f"üéµ {title if title else 'TikTok –≤–∏–¥–µ–æ'}"
                )
                os.remove(filepath)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    else:
        # –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º—É–∑—ã–∫–∏
        await update.message.reply_text("üéµ –ò—â—É –º—É–∑—ã–∫—É...")
        filepath, title = await search_music(message_text)
        
        if filepath and os.path.exists(filepath):
            file_size = os.path.getsize(filepath)
            
            if file_size > MAX_FILE_SIZE:
                await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.")
            else:
                await update.message.reply_audio(
                    audio=open(filepath, 'rb'),
                    caption=f"üéµ {title if title else '–ù–∞–π–¥–µ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞'}"
                )
                os.remove(filepath)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith('youtube_'):
        parts = data.split('_', 2)
        quality = parts[1]
        url = parts[2]
        
        await query.edit_message_text(text=f"üé• –ó–∞–≥—Ä—É–∂–∞—é YouTube –≤–∏–¥–µ–æ ({'–≤—ã—Å–æ–∫–æ–µ' if quality == 'best' else '–Ω–∏–∑–∫–æ–µ'} –∫–∞—á–µ—Å—Ç–≤–æ)...")
        
        filepath, title = await download_youtube_video(url, quality)
        
        if filepath and os.path.exists(filepath):
            file_size = os.path.getsize(filepath)
            
            if file_size > MAX_FILE_SIZE:
                await query.edit_message_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram.")
            else:
                await context.bot.send_video(
                    chat_id=query.message.chat_id,
                    video=open(filepath, 'rb'),
                    caption=f"üé• {title if title else 'YouTube –≤–∏–¥–µ–æ'}"
                )
                await query.edit_message_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                os.remove(filepath)
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()