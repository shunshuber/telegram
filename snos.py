import sqlite3
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import RetryAfter, MessageNotModified
from aiogram.utils import executor
from telethon.sync import TelegramClient
from telethon.tl.functions.messages import ReportRequest
from telethon.tl.types import InputReportReasonOther
import asyncio
from re import compile as compile_link
from os import listdir

# Telegram –∏ —Å–µ—Å—Å–∏–∏
TOKEN = '8265769208:AAH3R9aTPOwMWV5ir5SjIRQMNPzTbaYI18k'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ID —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
SUPER_ADMIN_ID = [ 7848751003 ]

# –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏—è–º Telethon –∏ –¥–∞–Ω–Ω—ã–µ
path = "n3rz4/sessions/"  # –ü—É—Ç—å –∫ .session —Ñ–∞–π–ª–∞–º
api_id = '25266150'  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à api_id
api_hash = 'b15d00920b648d9729d5d2867077e4db'  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à api_hash

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('subscriptions.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, subscription_end DATE)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS admins (id INTEGER PRIMARY KEY, level INTEGER)''')
conn.commit()

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = message.from_user.username
    start_date = datetime.now().strftime('%Y-%m-%d')
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üò≥ –ö–∞–∫ —Å–Ω–æ—Å–∏—Ç—å?", callback_data='how_to_demolish'),
        InlineKeyboardButton("üòé –ü—Ä–∏—á–∏–Ω—ã –¥–ª—è —Å–Ω–æ—Å–∞", callback_data='reasons_to_demolish')
    )
    
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!\n\nü§ñ –ë–æ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç {start_date}.\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'how_to_demolish' or c.data == 'reasons_to_demolish')
async def process_callback_button(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == 'how_to_demolish':
        with open('helpsnos.txt', 'r', encoding='utf-8') as file:
            text = file.read()
    elif data == 'reasons_to_demolish':
        with open('snoshelp.txt', 'r', encoding='utf-8') as file:
            text = file.read()
    
    await bot.send_message(callback_query.from_user.id, text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def check_subscription(user_id):
    cursor.execute('SELECT subscription_end FROM users WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        subscription_end = datetime.strptime(result[0], '%Y-%m-%d')
        return subscription_end >= datetime.now()
    return False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def check_admin_level(user_id, required_level):
    cursor.execute('SELECT level FROM admins WHERE id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        admin_level = result[0]
        return admin_level >= required_level
    return False


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['addsub'])
async def add_subscription(message: types.Message):
    if check_admin_level(message.from_user.id, 1):
        args = message.text.split()
        if len(args) == 3:
            user_id = int(args[1])
            days = int(args[2])
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è
            if check_admin_level(message.from_user.id, 1) and days > 10:
                await message.reply("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–∞–∫—Å–∏–º—É–º –Ω–∞ 10 –¥–Ω–µ–π.")
                return
            
            subscription_end = datetime.now() + timedelta(days=days)
            cursor.execute("INSERT OR REPLACE INTO users (id, subscription_end) VALUES (?, ?)", (user_id, subscription_end.strftime('%Y-%m-%d')))
            conn.commit()
            await message.reply(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ {days} –¥–Ω–µ–π.")
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /addsub id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–¥–Ω–µ–π")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –ö–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
@dp.message_handler(commands=['addadmin'])
async def add_admin(message: types.Message):
    if message.from_user.id == SUPER_ADMIN_ID:
        args = message.text.split()
        if len(args) == 3:
            user_id = int(args[1])
            level = int(args[2])
            if level in [1, 2]:
                cursor.execute("INSERT OR REPLACE INTO admins (id, level) VALUES (?, ?)", (user_id, level))
                conn.commit()
                await message.reply(f"–ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ —É—Ä–æ–≤–Ω—è {level} –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
            else:
                await message.reply("–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ 2.")
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /addadmin id —É—Ä–æ–≤–µ–Ω—å")
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã
@dp.message_handler(commands=['ss'])
async def ss_command(message: types.Message):
    if check_subscription(message.from_user.id):
        args = message.text.split()
        if len(args) == 2:
            link = args[1]
            successful_reports, failed_reports = await report_message(link, message)
            await message.reply(f"–ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –£—Å–ø–µ—à–Ω—ã–µ: {successful_reports}, –û—à–∏–±–∫–∏: {failed_reports}")
        else:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /ss —Å—Å—ã–ª–∫–∞")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
async def report_message(link: str, response_message: types.Message) -> (int, int):
    successful_reports = 0
    failed_reports = 0
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_link_pattern = compile_link(r'https://t.me/(?P<username_or_chat>.+)/(?P<message_id>\d+)')
    match = message_link_pattern.search(link)
    
    if match:
        chat = match.group("username_or_chat")
        message_id = int(match.group("message_id"))
        sessions = listdir(path)
        sessions = [s for s in sessions if s.endswith(".session")]
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        current_text = f"ü™¨ –ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è:\n‚úü –í—Å–µ–≥–æ –∂–∞–ª–æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
        for session in sessions:
            try:
                success = await send_report(session, chat, message_id)
                if success:
                    successful_reports += 1
                else:
                    failed_reports += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 5 —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±
                if successful_reports % 5 == 0:
                    new_text = f"ü™¨ –ñ–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è:\n‚úü –í—Å–µ–≥–æ –∂–∞–ª–æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_reports}"
                    await safe_edit_message_text(
                        response_message.chat.id, 
                        response_message.message_id,
                        current_text,
                        new_text
                    )
                    current_text = new_text  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–∏ {session}: {e}")
    return successful_reports, failed_reports

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
async def safe_edit_message_text(chat_id, message_id, current_text, new_text):
    if current_text == new_text:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return
    
    try:
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text)
    except RetryAfter as e:
        retry_after = e.timeout
        logging.warning(f"Flood control exceeded. Retry in {retry_after} seconds.")
        await asyncio.sleep(retry_after)
        await safe_edit_message_text(chat_id, message_id, current_text, new_text)
    except MessageNotModified:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã —á–µ—Ä–µ–∑ Telethon
async def send_report(session, chat, message_id):
    client = TelegramClient(f"{path}{session}", api_id, api_hash)
    await client.connect()
    
    if not await client.is_user_authorized():
        await client.disconnect()
        return False

    try:
        entity = await client.get_entity(chat)
        await client(ReportRequest(
            peer=entity,
            id=[message_id],
            reason=InputReportReasonOther(),
            message="–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º."
        ))
        return True
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã —Å–µ—Å—Å–∏–∏ {session}: {e}")
        return False
    finally:
        await client.disconnect()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
